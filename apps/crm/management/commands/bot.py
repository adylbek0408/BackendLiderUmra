import logging
from django.core.management.base import BaseCommand
from telegram.ext import Updater, CallbackQueryHandler
from django.conf import settings
from django.db import transaction
from ...models import Client, Manager

logger = logging.getLogger(__name__)

def handle_accept(update, context):
    query = update.callback_query
    query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
        client_id = int(query.data.split('_')[1])
    except (IndexError, ValueError):
        logger.error("Invalid callback data: %s", query.data)
        return

    try:
        with transaction.atomic():
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            client = Client.objects.select_related('package').get(id=client_id)
            manager = Manager.objects.get(telegram_id=str(query.from_user.id))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞
            if client.status != 'new':
                query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ —Ç–æ–≥–æ –∂–µ —Ñ–∏–ª–∏–∞–ª–∞
            if manager.branch != client.package.place:
                query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            client.status = 'processing'
            client.manager = manager
            client.save(update_fields=['status', 'manager', 'updated_at'])

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            manager_name = manager.get_display_name()
            accept_text = (
                f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {manager_name}\n"
                f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {client.updated_at.astimezone().strftime('%Y-%m-%d %H:%M')}"
            )
            original_message_text = (
                f"üì£ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({client.package.place})‚ùóÔ∏è\n"
                f"üë§ –ò–º—è: {client.full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
                f"üåç –ú–µ—Å—Ç–æ: {client.country}, {client.city}\n"
                f"üì¶ –ü–∞–∫–µ—Ç: {client.package.name or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
            )
            new_text = f"{accept_text}\n\n{original_message_text}"

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            context.bot.edit_message_text(
                chat_id=settings.TELEGRAM_GROUP_IDS[client.package.place],
                message_id=query.message.message_id,
                text=new_text,
                reply_markup=None
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            context.bot.send_message(
                chat_id=manager.telegram_id,
                text=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:\n{client.full_name}\n{client.phone}"
            )

    except Client.DoesNotExist:
        logger.error("Client not found: %d", client_id)
        query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Manager.DoesNotExist:
        logger.error("Manager not found: %s", query.from_user.id)
        query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä!")
    except Exception as e:
        logger.exception("Critical error in handle_accept: %s", str(e))
        query.edit_message_text("‚ùó –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


class Command(BaseCommand):
    help = 'Run Telegram bot'

    def handle(self, *args, **options):
        updater = Updater(settings.TELEGRAM_BOT_TOKEN, use_context=True)
        updater.dispatcher.add_handler(CallbackQueryHandler(handle_accept, pattern='^accept_'))
        updater.dispatcher.add_error_handler(self.error_handler)
        self.stdout.write("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    def error_handler(self, update, context):
        logger.error('Update "%s" caused error: %s', update, context.error)

