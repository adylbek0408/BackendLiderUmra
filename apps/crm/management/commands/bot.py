import logging
from django.core.management.base import BaseCommand
from telegram.ext import Updater, CallbackQueryHandler
from django.conf import settings
from django.db import transaction
from django.utils import timezone
from ...models import Client, Manager

logger = logging.getLogger(__name__)

def build_notification_text(client, manager):
    accept_text = (
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {manager.fio}\n"
        f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {client.updated_at.astimezone().strftime('%Y-%m-%d %H:%M')}\n\n"
    )
    
    original_message = (
        f"üì£ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({client.package.place})‚ùóÔ∏è\n"
        f"üë§ –ò–º—è: {client.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
        f"üåç –ú–µ—Å—Ç–æ: {client.country}, {client.city}\n"
        f"üì¶ –ü–∞–∫–µ—Ç: {client.package.name or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    
    return f"{accept_text}{original_message}"

def handle_accept(update, context):
    query = update.callback_query
    query.answer()

    try:
        client_id = int(query.data.split('_')[1])
        client = Client.objects.select_related('package').get(id=client_id)
        manager = Manager.objects.get(telegram_id=str(query.from_user.id))

        if client.status != 'new':
            query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!")
            return

        if manager.branch != client.package.place:
            query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞!")
            return

        with transaction.atomic():
            client.status = 'processing'
            client.manager = manager
            client.save(update_fields=['status', 'manager', 'updated_at'])

            new_text = build_notification_text(client, manager)
            
            context.bot.edit_message_text(
                chat_id=settings.TELEGRAM_GROUP_IDS[client.package.place],
                message_id=query.message.message_id,
                text=new_text,
                reply_markup=None
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            context.bot.send_message(
                chat_id=manager.telegram_id,
                text=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:\n{client.full_name}\n{client.phone}"
            )

    except Client.DoesNotExist:
        logger.error(f"Client not found: {client_id}")
        query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except Manager.DoesNotExist:
        logger.error(f"Manager not found: {query.from_user.id}")
        query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä!")
    except KeyError as e:
        logger.error(f"Group not found for branch: {e}")
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø—ã —Ñ–∏–ª–∏–∞–ª–∞")
    except Exception as e:
        logger.exception(f"Critical error: {str(e)}")
        query.edit_message_text("‚ùó –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


class Command(BaseCommand):
    help = 'Run Telegram bot'

    def handle(self, *args, **options):
        updater = Updater(settings.TELEGRAM_BOT_TOKEN, use_context=True)
        updater.dispatcher.add_handler(CallbackQueryHandler(handle_accept, pattern='^accept_'))
        updater.dispatcher.add_error_handler(self.error_handler)
        self.stdout.write("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    def error_handler(self, update, context):
        logger.error('Update "%s" caused error: %s', update, context.error)
        