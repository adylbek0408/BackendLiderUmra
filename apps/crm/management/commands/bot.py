import logging
from django.core.management.base import BaseCommand
from telegram.ext import Updater, CallbackQueryHandler
from django.conf import settings
from django.db import transaction
from django.utils import timezone
from ...models import Client, Manager
import traceback

logger = logging.getLogger(__name__)

def build_notification_text(client, manager):
    accept_time = timezone.localtime(client.updated_at).strftime('%Y-%m-%d %H:%M')
    
    return (
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {manager.user.get_full_name() if manager.user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä'}\n"
        f"‚è± –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è: {accept_time}\n\n"
        f"üì£ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({client.package.place})‚ùóÔ∏è\n"
        f"üë§ –ò–º—è: {client.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
        f"üåç –ú–µ—Å—Ç–æ: {client.country}, {client.city}\n"  # Fixed variable name
        f"üì¶ –ü–∞–∫–µ—Ç: {client.package.name or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )

def handle_accept(update, context):
    query = update.callback_query
    query.answer()

    try:
        client_id = int(query.data.split('_')[1])
        chat_id = query.message.chat.id
        message_id = query.message.message_id

        with transaction.atomic():
            client = Client.objects.select_related('package') \
                .filter(package__isnull=False) \
                .select_for_update() \
                .get(id=client_id)

            manager = Manager.objects.get(telegram_id=str(query.from_user.id))

            if not client.package.place:
                context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå –£ –ø–∞–∫–µ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∏–ª–∏–∞–ª!",
                    reply_markup=None
                )
                return

            if manager.branch != client.package.place:
                context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞!",
                    reply_markup=None
                )
                return

            if client.status != 'new':
                context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!",
                    reply_markup=None
                )
                return

            client.status = 'processing'
            client.manager = manager
            client.save(update_fields=['status', 'manager', 'updated_at'])

            # Edit original message to remove the button
            new_text = build_notification_text(client, manager)
            context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=new_text,
                reply_markup=None
            )

            # Notify manager privately
            context.bot.send_message(
                chat_id=manager.telegram_id,
                text=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:\n{client.full_name}\n{client.phone}"
            )

    except Client.DoesNotExist:
        logger.error(f"Client not found: {client_id}")
        query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", reply_markup=None)
    except Manager.DoesNotExist:
        logger.error(f"Manager not found: {query.from_user.id}")
        query.edit_message_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä!", reply_markup=None)
    except Exception as e:
        logger.error(f"Critical error: {str(e)}\n{traceback.format_exc()}")
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="‚ùó –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            reply_markup=None
        )


class Command(BaseCommand):
    help = 'Run Telegram bot'

    def handle(self, *args, **options):
        updater = Updater(settings.TELEGRAM_BOT_TOKEN, use_context=True)
        updater.dispatcher.add_handler(CallbackQueryHandler(handle_accept, pattern='^accept_'))
        updater.dispatcher.add_error_handler(self.error_handler)
        self.stdout.write("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    def error_handler(self, update, context):
        logger.error('Update "%s" caused error: %s', update, context.error)
    